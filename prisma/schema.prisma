generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum ShareType {
  EQUAL
  EXACT
  PERCENTAGE
}

enum ExpenseCategory {
  FOOD
  TRAVEL
  UTILITIES
  ENTERTAINMENT
  RENT
  TRANSPORT
  SHOPPING
  HEALTHCARE
  EDUCATION
  OTHER
}

enum RecurrenceFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

model Expense {
  id           String          @id @default(cuid())
  amount       Decimal         @db.Decimal(10, 2)
  description  String
  paidBy       String
  participants String[]
  shareType    ShareType       @default(EQUAL)
  customShares Json?
  category     ExpenseCategory @default(OTHER)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  
  // Recurring expense relation
  recurringExpenseId String?
  recurringExpense   RecurringExpense? @relation(fields: [recurringExpenseId], references: [id], onDelete: SetNull)
  
  // Relations
  settlements Settlement[]
  
  @@index([category])
  @@index([createdAt])
  @@index([paidBy])
}

model RecurringExpense {
  id          String              @id @default(cuid())
  amount      Decimal             @db.Decimal(10, 2)
  description String
  paidBy      String
  participants String[]
  shareType   ShareType           @default(EQUAL)
  customShares Json?
  category    ExpenseCategory     @default(OTHER)
  frequency   RecurrenceFrequency
  startDate   DateTime
  endDate     DateTime?           // Optional end date
  nextDue     DateTime            // Next execution date
  isActive    Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  
  // Generated expenses
  expenses Expense[]
  
  @@index([nextDue])
  @@index([isActive])
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Settlement {
  id         String   @id @default(cuid())
  amount     Decimal  @db.Decimal(10, 2)
  fromPerson String
  toPerson   String
  expenseId  String?
  settled    Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  expense Expense? @relation(fields: [expenseId], references: [id], onDelete: SetNull)
}